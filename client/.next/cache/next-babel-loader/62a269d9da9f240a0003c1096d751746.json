{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tzaru\\\\OneDrive\\\\Radna povr\\u0161ina\\\\Projects\\\\LIREDDIT-SERVER\\\\client\\\\src\\\\components\\\\InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react';\nexport const InputField = props => {\n  const [field, {\n    error\n  }] = useField(props);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread(_objectSpread({}, props), field), {}, {\n      id: field.name,\n      placeholder: props.placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/tzaru/OneDrive/Radna povr≈°ina/Projects/LIREDDIT-SERVER/client/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","useField","React","InputField","props","field","error","name","label","placeholder"],"mappings":";;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,QAKO,kBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C;AAOA,OAAO,MAAMC,UAAqC,GAAIC,KAAD,IAAW;AAC9D,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBL,QAAQ,CAACG,KAAD,CAAnC;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA,gBAAiCH,KAAK,CAACI;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,gDACMJ,KADN,GAEMC,KAFN;AAGE,MAAA,EAAE,EAAEA,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAEH,KAAK,CAACK;AAJrB;AAAA;AAAA;AAAA;AAAA,YAFF,EAQGH,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkD,IAR1D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAdM","sourcesContent":["import {\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n} from '@chakra-ui/react';\r\nimport { useField } from 'formik';\r\nimport React, { InputHTMLAttributes } from 'react';\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  name: string;\r\n  label: string;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = (props) => {\r\n  const [field, { error }] = useField(props);\r\n  return (\r\n    <FormControl isInvalid={!!error}>\r\n      <FormLabel htmlFor={field.name}>{props.label}</FormLabel>\r\n      <Input\r\n        {...props}\r\n        {...field}\r\n        id={field.name}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n    </FormControl>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}